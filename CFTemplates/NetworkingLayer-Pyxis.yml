AWSTemplateFormatVersion: "2010-09-09"

Description: This template creates the networking layer for Pyxis exercise

Parameters:
  Environment:
    Description: Define environment tag
    Type: String
    Default: Pyxis
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    MinLength: 5
    MaxLength: 12
    ConstraintDescription: Name must start with a letter and followed by any letter or number, minimum lenght 5 and maximun lenght 12
  VPCName:
    Description: Define the VPCName
    Type: String
    Default: PyxisVPC
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    MinLength: 5
    MaxLength: 12
    ConstraintDescription: Name must start with a letter and followed by any letter or number, minimum lenght 5 and maximun lenght 12
  VPCCIDR:
    Description: Define VPC CIDR
    Type: String
    Default: 10.0.0.0/16
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
  BastionSubnet1CIDR:
    Description: Define CIDR for BastionSubnet1CIDR
    Type: String
    Default: 10.0.0.0/25
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
  BastionSubnet2CIDR:
    Description: Define CIDR for BastionSubnet2CIDR
    Type: String
    Default: 10.0.0.128/25
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
  WebSubnet1CIDR:
    Description: Define CIDR for WebSubnet1CIDR
    Type: String
    Default: 10.0.1.0/25
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
  WebSubnet2CIDR:
    Description: Define CIDR for WebSubnet2CIDR
    Type: String
    Default: 10.0.1.128/25
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
  DBSubnetCIDR:
    Description: Define CIDR for PrivateSubnet
    Type: String
    Default: 10.0.2.0/25
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x

Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Ref VPCName
      - Key: Environment
        Value: !Ref Environment
  BastionSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 2, !GetAZs ''] #Comment: Get third AZ
      CidrBlock: !Ref BastionSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Sub ${Environment} BastionSubnet1 AZ3
      VpcId: !Ref myVPC
  BastionSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs ''] #Comment: Get second AZ
      CidrBlock: !Ref BastionSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Sub ${Environment} BastionSubnet2 AZ2
      VpcId: !Ref myVPC
  WebSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 2, !GetAZs '']
      CidrBlock: !Ref WebSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: !Sub ${Environment} WebSubnet1 AZ3
      VpcId: !Ref myVPC
  WebSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '']
      CidrBlock: !Ref WebSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: !Sub ${Environment} WebSubnet2 AZ1
      VpcId: !Ref myVPC
  DBSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '']
      CidrBlock: !Ref DBSubnetCIDR
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: !Sub ${Environment} DBSubnet AZ2
      VpcId: !Ref myVPC
  BastionRoute:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref myVPC
      Tags:
      - Key: Name
        Value: !Sub ${Environment} BastionRoute
  WebRoute:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref myVPC
      Tags:
      - Key: Name
        Value: !Sub ${Environment} WebRoute
  DBRoute:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref myVPC
      Tags:
      - Key: Name
        Value: !Sub ${Environment} DBRoute
  BastionRouteSubnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref BastionRoute
      SubnetId: !Ref BastionSubnet1
  BastionRouteSubnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref BastionRoute
      SubnetId: !Ref BastionSubnet2
  WebRouteSubnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref WebRoute
      SubnetId: !Ref WebSubnet1
  WebRouteSubnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref WebRoute
      SubnetId: !Ref WebSubnet2
  DBRouteSubnetAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref DBRoute
      SubnetId: !Ref DBSubnet
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub ${Environment} IGW
  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref IGW
      VpcId: !Ref myVPC
  NATGWPublic:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt EIPNATGW.AllocationId
      SubnetId: !Ref WebSubnet1
      Tags: 
      - Key: Name
        Value: !Sub ${Environment} NATGWPublic
  EIPNATGW:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  RouteToIGW:
    Type: AWS::EC2::Route
    DependsOn: IGWAttachment
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref BastionRoute
  RouteToNATGW:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGWPublic
      RouteTableId: !Ref DBRoute

Outputs:
  VPCID: 
    Description: A reference to the created VPC
    Value: !Ref myVPC
    Export:
      Name: !Sub ${AWS::StackName}-VPCID
  VPCCIDR:
    Description: CIDR of the VPC
    Value: !GetAtt myVPC.CidrBlock #Comment: Get attribute
  AZBastionSubnet1:
    Description: AZ of the BastionSubnet1
    Value: !GetAtt BastionSubnet1.AvailabilityZone
    Export:
      Name: !Sub ${AWS::StackName}-AZBastionSubnet1
  AZBastionSubnet2:
    Description: AZ of the BastionSubnet2
    Value: !GetAtt BastionSubnet2.AvailabilityZone
    Export:
      Name: !Sub ${AWS::StackName}-AZBastionSubnet2
  AZWebSubnet1:
    Description: AZ of the WebSubnet1
    Value: !GetAtt WebSubnet1.AvailabilityZone
    Export:
      Name: !Sub ${AWS::StackName}-AZWebSubnet1
  AZWebSubnet2:
    Description: AZ of the WebSubnet2
    Value: !GetAtt WebSubnet2.AvailabilityZone
    Export:
      Name: !Sub ${AWS::StackName}-AZWebSubnet2
  AZDBSubnet:
    Description: AZ of the DBSubnet
    Value: !GetAtt DBSubnet.AvailabilityZone
    Export:
      Name: !Sub ${AWS::StackName}-AZDBSubnet
  BastionSubnet1:
    Description: SubnetId of BastionSubnet1
    Value: !Ref BastionSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-BastionSubnet1
  BastionSubnet2:
    Description: SubnetId of BastionSubnet2
    Value: !Ref BastionSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-BastionSubnet2
  WebSubnet1:
    Description: SubnetId of WebSubnet1
    Value: !Ref WebSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-WebSubnet1
  WebSubnet2:
    Description: SubnetId of WebSubnet2
    Value: !Ref WebSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-WebSubnet2
  DBSubnet:
    Description: SubnetId of DBSubnet
    Value: !Ref DBSubnet
    Export:
      Name: !Sub ${AWS::StackName}-DBSubnet
